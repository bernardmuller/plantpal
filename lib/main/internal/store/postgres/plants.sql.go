// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: plants.sql

package postgres

import (
	"context"

	"github.com/google/uuid"
)

const createPlant = `-- name: CreatePlant :one
INSERT INTO plants (id, common, family, created_at, updated_at)
VALUES ($1, $2, $3, NOW(), NOW())
RETURNING id, common, family, created_at, updated_at
`

type CreatePlantParams struct {
	ID     uuid.UUID
	Common string
	Family string
}

func (q *Queries) CreatePlant(ctx context.Context, arg CreatePlantParams) (Plant, error) {
	row := q.db.QueryRowContext(ctx, createPlant, arg.ID, arg.Common, arg.Family)
	var i Plant
	err := row.Scan(
		&i.ID,
		&i.Common,
		&i.Family,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deletePlant = `-- name: DeletePlant :one
DELETE FROM plants
WHERE id = $1
RETURNING id, common, family, created_at, updated_at
`

func (q *Queries) DeletePlant(ctx context.Context, id uuid.UUID) (Plant, error) {
	row := q.db.QueryRowContext(ctx, deletePlant, id)
	var i Plant
	err := row.Scan(
		&i.ID,
		&i.Common,
		&i.Family,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAllPlants = `-- name: GetAllPlants :many
SELECT id, common, family, created_at, updated_at FROM plants
ORDER BY created_at DESC
`

func (q *Queries) GetAllPlants(ctx context.Context) ([]Plant, error) {
	rows, err := q.db.QueryContext(ctx, getAllPlants)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Plant
	for rows.Next() {
		var i Plant
		if err := rows.Scan(
			&i.ID,
			&i.Common,
			&i.Family,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPlantByCommon = `-- name: GetPlantByCommon :one
SELECT id, common, family, created_at, updated_at FROM plants
WHERE common = $1
`

func (q *Queries) GetPlantByCommon(ctx context.Context, common string) (Plant, error) {
	row := q.db.QueryRowContext(ctx, getPlantByCommon, common)
	var i Plant
	err := row.Scan(
		&i.ID,
		&i.Common,
		&i.Family,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getPlantByID = `-- name: GetPlantByID :one
SELECT id, common, family, created_at, updated_at FROM plants
WHERE id = $1
`

func (q *Queries) GetPlantByID(ctx context.Context, id uuid.UUID) (Plant, error) {
	row := q.db.QueryRowContext(ctx, getPlantByID, id)
	var i Plant
	err := row.Scan(
		&i.ID,
		&i.Common,
		&i.Family,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updatePlant = `-- name: UpdatePlant :one
UPDATE plants
SET common = $2, family = $3, updated_at = NOW()
WHERE id = $1
RETURNING id, common, family, created_at, updated_at
`

type UpdatePlantParams struct {
	ID     uuid.UUID
	Common string
	Family string
}

func (q *Queries) UpdatePlant(ctx context.Context, arg UpdatePlantParams) (Plant, error) {
	row := q.db.QueryRowContext(ctx, updatePlant, arg.ID, arg.Common, arg.Family)
	var i Plant
	err := row.Scan(
		&i.ID,
		&i.Common,
		&i.Family,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
