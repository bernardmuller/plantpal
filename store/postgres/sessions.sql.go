// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: sessions.sql

package postgres

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createSession = `-- name: CreateSession :one
INSERT INTO sessions (id, user_id, expires, access_token, ip_address )
VALUES ($1, $2, $3, $4, $5 )
RETURNING id, user_id, access_token, expires, created_at, updated_at, ip_address
`

type CreateSessionParams struct {
	ID          uuid.UUID
	UserID      uuid.UUID
	Expires     time.Time
	AccessToken string
	IpAddress   string
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (Session, error) {
	row := q.db.QueryRowContext(ctx, createSession,
		arg.ID,
		arg.UserID,
		arg.Expires,
		arg.AccessToken,
		arg.IpAddress,
	)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.AccessToken,
		&i.Expires,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IpAddress,
	)
	return i, err
}

const deleteSessionByID = `-- name: DeleteSessionByID :exec
DELETE FROM sessions WHERE id = $1
`

func (q *Queries) DeleteSessionByID(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteSessionByID, id)
	return err
}

const getSessionByID = `-- name: GetSessionByID :one
SELECT id, user_id, access_token, expires, created_at, updated_at, ip_address FROM sessions WHERE id = $1
`

func (q *Queries) GetSessionByID(ctx context.Context, id uuid.UUID) (Session, error) {
	row := q.db.QueryRowContext(ctx, getSessionByID, id)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.AccessToken,
		&i.Expires,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IpAddress,
	)
	return i, err
}
