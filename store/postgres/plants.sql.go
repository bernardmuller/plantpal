// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: plants.sql

package postgres

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createPlant = `-- name: CreatePlant :one
INSERT INTO plants (id, common, family, created_at, updated_at, latin, category, origin, climate, tempmax, tempmin, ideallight, toleratedlight, watering, insects, diseases, soil, repotperiod, use)
VALUES ($1, $2, $3, NOW(), NOW(), $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17)
RETURNING id, common, family, created_at, updated_at, latin, category, origin, climate, tempmax, tempmin, ideallight, toleratedlight, watering, insects, diseases, soil, repotperiod, use
`

type CreatePlantParams struct {
	ID             uuid.UUID
	Common         string
	Family         string
	Latin          sql.NullString
	Category       sql.NullString
	Origin         sql.NullString
	Climate        sql.NullString
	Tempmax        sql.NullString
	Tempmin        sql.NullString
	Ideallight     sql.NullString
	Toleratedlight sql.NullString
	Watering       sql.NullString
	Insects        sql.NullString
	Diseases       sql.NullString
	Soil           sql.NullString
	Repotperiod    sql.NullString
	Use            sql.NullString
}

func (q *Queries) CreatePlant(ctx context.Context, arg CreatePlantParams) (Plant, error) {
	row := q.db.QueryRowContext(ctx, createPlant,
		arg.ID,
		arg.Common,
		arg.Family,
		arg.Latin,
		arg.Category,
		arg.Origin,
		arg.Climate,
		arg.Tempmax,
		arg.Tempmin,
		arg.Ideallight,
		arg.Toleratedlight,
		arg.Watering,
		arg.Insects,
		arg.Diseases,
		arg.Soil,
		arg.Repotperiod,
		arg.Use,
	)
	var i Plant
	err := row.Scan(
		&i.ID,
		&i.Common,
		&i.Family,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Latin,
		&i.Category,
		&i.Origin,
		&i.Climate,
		&i.Tempmax,
		&i.Tempmin,
		&i.Ideallight,
		&i.Toleratedlight,
		&i.Watering,
		&i.Insects,
		&i.Diseases,
		&i.Soil,
		&i.Repotperiod,
		&i.Use,
	)
	return i, err
}

const deletePlant = `-- name: DeletePlant :one
DELETE FROM plants
WHERE id = $1
RETURNING id, common, family, created_at, updated_at, latin, category, origin, climate, tempmax, tempmin, ideallight, toleratedlight, watering, insects, diseases, soil, repotperiod, use
`

func (q *Queries) DeletePlant(ctx context.Context, id uuid.UUID) (Plant, error) {
	row := q.db.QueryRowContext(ctx, deletePlant, id)
	var i Plant
	err := row.Scan(
		&i.ID,
		&i.Common,
		&i.Family,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Latin,
		&i.Category,
		&i.Origin,
		&i.Climate,
		&i.Tempmax,
		&i.Tempmin,
		&i.Ideallight,
		&i.Toleratedlight,
		&i.Watering,
		&i.Insects,
		&i.Diseases,
		&i.Soil,
		&i.Repotperiod,
		&i.Use,
	)
	return i, err
}

const getAllPlants = `-- name: GetAllPlants :many
SELECT id, common, family, created_at, updated_at, latin, category, origin, climate, tempmax, tempmin, ideallight, toleratedlight, watering, insects, diseases, soil, repotperiod, use FROM plants
ORDER BY created_at DESC
`

func (q *Queries) GetAllPlants(ctx context.Context) ([]Plant, error) {
	rows, err := q.db.QueryContext(ctx, getAllPlants)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Plant
	for rows.Next() {
		var i Plant
		if err := rows.Scan(
			&i.ID,
			&i.Common,
			&i.Family,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Latin,
			&i.Category,
			&i.Origin,
			&i.Climate,
			&i.Tempmax,
			&i.Tempmin,
			&i.Ideallight,
			&i.Toleratedlight,
			&i.Watering,
			&i.Insects,
			&i.Diseases,
			&i.Soil,
			&i.Repotperiod,
			&i.Use,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPlantByCommon = `-- name: GetPlantByCommon :one
SELECT id, common, family, created_at, updated_at, latin, category, origin, climate, tempmax, tempmin, ideallight, toleratedlight, watering, insects, diseases, soil, repotperiod, use FROM plants
WHERE common = $1
`

func (q *Queries) GetPlantByCommon(ctx context.Context, common string) (Plant, error) {
	row := q.db.QueryRowContext(ctx, getPlantByCommon, common)
	var i Plant
	err := row.Scan(
		&i.ID,
		&i.Common,
		&i.Family,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Latin,
		&i.Category,
		&i.Origin,
		&i.Climate,
		&i.Tempmax,
		&i.Tempmin,
		&i.Ideallight,
		&i.Toleratedlight,
		&i.Watering,
		&i.Insects,
		&i.Diseases,
		&i.Soil,
		&i.Repotperiod,
		&i.Use,
	)
	return i, err
}

const getPlantByID = `-- name: GetPlantByID :one
SELECT id, common, family, created_at, updated_at, latin, category, origin, climate, tempmax, tempmin, ideallight, toleratedlight, watering, insects, diseases, soil, repotperiod, use FROM plants
WHERE id = $1
`

func (q *Queries) GetPlantByID(ctx context.Context, id uuid.UUID) (Plant, error) {
	row := q.db.QueryRowContext(ctx, getPlantByID, id)
	var i Plant
	err := row.Scan(
		&i.ID,
		&i.Common,
		&i.Family,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Latin,
		&i.Category,
		&i.Origin,
		&i.Climate,
		&i.Tempmax,
		&i.Tempmin,
		&i.Ideallight,
		&i.Toleratedlight,
		&i.Watering,
		&i.Insects,
		&i.Diseases,
		&i.Soil,
		&i.Repotperiod,
		&i.Use,
	)
	return i, err
}

const updatePlant = `-- name: UpdatePlant :one
UPDATE plants
SET common = $2, family = $3, updated_at = NOW(), latin = $4, category = $5, origin = $6, climate = $7, tempmax = $8, tempmin = $9, ideallight = $10, toleratedlight = $11, watering = $12, insects = $13, diseases = $14, soil = $15, repotperiod = $16, use = $17
WHERE id = $1
RETURNING id, common, family, created_at, updated_at, latin, category, origin, climate, tempmax, tempmin, ideallight, toleratedlight, watering, insects, diseases, soil, repotperiod, use
`

type UpdatePlantParams struct {
	ID             uuid.UUID
	Common         string
	Family         string
	Latin          sql.NullString
	Category       sql.NullString
	Origin         sql.NullString
	Climate        sql.NullString
	Tempmax        sql.NullString
	Tempmin        sql.NullString
	Ideallight     sql.NullString
	Toleratedlight sql.NullString
	Watering       sql.NullString
	Insects        sql.NullString
	Diseases       sql.NullString
	Soil           sql.NullString
	Repotperiod    sql.NullString
	Use            sql.NullString
}

func (q *Queries) UpdatePlant(ctx context.Context, arg UpdatePlantParams) (Plant, error) {
	row := q.db.QueryRowContext(ctx, updatePlant,
		arg.ID,
		arg.Common,
		arg.Family,
		arg.Latin,
		arg.Category,
		arg.Origin,
		arg.Climate,
		arg.Tempmax,
		arg.Tempmin,
		arg.Ideallight,
		arg.Toleratedlight,
		arg.Watering,
		arg.Insects,
		arg.Diseases,
		arg.Soil,
		arg.Repotperiod,
		arg.Use,
	)
	var i Plant
	err := row.Scan(
		&i.ID,
		&i.Common,
		&i.Family,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Latin,
		&i.Category,
		&i.Origin,
		&i.Climate,
		&i.Tempmax,
		&i.Tempmin,
		&i.Ideallight,
		&i.Toleratedlight,
		&i.Watering,
		&i.Insects,
		&i.Diseases,
		&i.Soil,
		&i.Repotperiod,
		&i.Use,
	)
	return i, err
}
